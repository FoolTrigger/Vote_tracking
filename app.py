import requests
from bs4 import BeautifulSoup
import pandas as pd
import re
import time
import streamlit as st

st.set_page_config(page_title="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤ vam.golosza.ru", layout="wide")
st.title("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤ vam.golosza.ru")

BASE_URL = "https://vam.golosza.ru/vote/list?page=&mo-search=–±–æ—Ä&filter%5Baddress%5D%5B%5D=1&search=undefined"
PROJECT_BASE = "https://vam.golosza.ru/vote/"

@st.cache_data(ttl=600)
def get_projects_info():
    session = requests.Session()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω—É —Å–µ—Å—Å–∏—é
    response = session.get(BASE_URL, timeout=10)
    soup = BeautifulSoup(response.text, "html.parser")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç—ã
    links = [
        a["href"] for a in soup.find_all("a", href=True)
        if a["href"].startswith(PROJECT_BASE) and PROJECT_BASE + "list" not in a["href"]
    ]

    projects = []
    seen_links = set()
    for link in links:
        if link in seen_links:
            continue
        seen_links.add(link)

        try:
            project_response = session.get(link, timeout=10)
            project_soup = BeautifulSoup(project_response.text, "html.parser")

            title_tag = project_soup.find("p", class_="title")
            title = title_tag.text.strip() if title_tag else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

            votes_tag = project_soup.find("div", class_="took-part-banner_count")
            votes = int(re.findall(r'\d+', votes_tag.text)[0]) if votes_tag and re.findall(r'\d+', votes_tag.text) else 0

            projects.append({
                "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞": title,
                "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç": link,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤": votes
            })

            time.sleep(0.2)  # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {link}: {e}")
            continue

    session.close()

    df = pd.DataFrame(projects)
    if not df.empty:
        df = df.sort_values(by="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤", ascending=False).reset_index(drop=True)
        df.index += 1
        df.index.name = "‚Ññ"
    return df

def display_table(df, top_n=None):
    df_display = df.copy()
    df_display["–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç"] = df_display["–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç"].apply(
        lambda x: f"<a href='{x}' target='_blank'>–°—Å—ã–ª–∫–∞</a>"
    )
    if top_n:
        df_display = df_display.head(top_n)
    st.write(df_display.to_html(escape=False, index=True), unsafe_allow_html=True)

# --- Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞"):
    df_projects = get_projects_info()
    st.session_state["df_projects"] = df_projects
    st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df_projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤.")

df_projects = st.session_state.get("df_projects", pd.DataFrame())

if not df_projects.empty:
    st.subheader("üî• –¢–æ–ø-10 –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –≥–æ–ª–æ—Å–∞–º")
    display_table(df_projects, top_n=10)

    st.subheader("üìã –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã")
    display_table(df_projects)
else:
    st.info("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ üöÄ")
