import requests
from bs4 import BeautifulSoup
import pandas as pd
import streamlit as st
import re
import os
import time
from datetime import datetime, date

st.set_page_config(page_title="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤ vam.golosza.ru", layout="wide")
st.title("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤")

BASE_URL = "https://vam.golosza.ru"
HISTORY_FILE = "history.xlsx"

@st.cache_data(ttl=600)
def get_projects_info():
    url = "https://vam.golosza.ru"
    response = requests.get(url)
    soup = BeautifulSoup(response.text, "html.parser")

    projects = []
    seen_links = set()
    session = requests.Session()

    for a_tag in soup.find_all("a", href=True):
        link = a_tag["href"]
        if not link.startswith("/vote/"):
            continue
        full_link = f"{BASE_URL}{link}"
        if full_link in seen_links:
            continue

        seen_links.add(full_link)

        try:
            project_response = session.get(full_link, timeout=10)
            project_soup = BeautifulSoup(project_response.text, "html.parser")

            title_tag = project_soup.find("p", class_="title")
            title = title_tag.get_text(strip=True) if title_tag else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

            votes_tag = project_soup.find("span", class_="voting-count")
            votes = int(votes_tag.get_text(strip=True)) if votes_tag else 0

            projects.append({
                "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞": title,
                "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç": full_link,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤": votes
            })

            time.sleep(0.2)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {full_link}: {e}")

    session.close()

    # üü¢ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    df = pd.DataFrame(projects)
    if not df.empty:
        df = df.sort_values(by="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤", ascending=False).reset_index(drop=True)
    return df

def save_history(df):
    today = date.today().isoformat()
    df_save = df.copy()
    df_save["–î–∞—Ç–∞"] = today
    if os.path.exists(HISTORY_FILE):
        old_df = pd.read_excel(HISTORY_FILE)
        df_save = pd.concat([old_df, df_save], ignore_index=True)
    df_save.to_excel(HISTORY_FILE, index=False)

def get_daily_diff(df_today: pd.DataFrame):
    if not os.path.exists(HISTORY_FILE):
        df_today["–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤"] = 0
        df_today.to_excel(HISTORY_FILE, index=False)
        return df_today

    df_old = pd.read_excel(HISTORY_FILE)

    # –û—á–∏—â–∞–µ–º –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Å—ã–ª–∫–∏
    df_old["–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç"] = df_old["–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç"].astype(str).str.extract(r'(https?://[^\s<]+)')[0]
    df_today["–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç"] = df_today["–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç"].astype(str).str.extract(r'(https?://[^\s<]+)')[0]

    df_today_compare = pd.merge(
        df_today,
        df_old[["–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤"]],
        on="–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç",
        how="left",
        suffixes=("", "_–≤—á–µ—Ä–∞")
    )

    df_today_compare["–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤"] = (
        df_today_compare["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤"] - df_today_compare["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤_–≤—á–µ—Ä–∞"].fillna(0)
    )

    df_today_compare.to_excel(HISTORY_FILE, index=False)
    df_today_compare = df_today_compare.sort_values(by="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤", ascending=False).reset_index(drop=True)
    df_today_compare["–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"] = datetime.now().strftime("%Y-%m-%d %H:%M")
    return df_today_compare

def display_table(df, top_n=None):
    df_display = df.copy()
    df_display["–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç"] = df_display["–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç"].apply(
        lambda x: f"<a href='{x}' target='_blank'>–û—Ç–∫—Ä—ã—Ç—å</a>"
    )
    if top_n:
        df_display = df_display.head(top_n)
    st.write(df_display.to_html(escape=False, index=True), unsafe_allow_html=True)

# --- Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞"):
    df_today = get_projects_info()
    if df_today.empty:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Å–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    else:
        df_today = get_daily_diff(df_today)
        save_history(df_today)
        st.session_state["df_today"] = df_today
        st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df_today)} –ø—Ä–æ–µ–∫—Ç–æ–≤.")

df_today = st.session_state.get("df_today", pd.DataFrame())

if not df_today.empty:
    st.subheader("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤")
    search_query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞").strip().lower()
    if search_query:
        df_filtered = df_today[df_today["–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"].str.lower().str.contains(search_query)]
    else:
        df_filtered = df_today

    st.subheader("üî• –¢–æ–ø-10 –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –≥–æ–ª–æ—Å–∞–º")
    display_table(df_today, top_n=10)

    st.subheader("üìã –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã")
    display_table(df_filtered)
else:
    st.info("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ üöÄ")
