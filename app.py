import requests
from bs4 import BeautifulSoup
import pandas as pd
import streamlit as st
import time
import os
from datetime import datetime, date

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(page_title="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤ vam.golosza.ru", layout="wide")
st.title("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤ vam.golosza.ru")

BASE_URL = "https://vam.golosza.ru/vote/list?page=&mo-search=–±–æ—Ä&filter%5Baddress%5D%5B%5D=1&search=undefined"
PROJECT_BASE = "https://vam.golosza.ru/vote/"
HISTORY_FILE = "votes_history.xlsx"

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ ---
@st.cache_data(ttl=600)
def get_projects_info():
    session = requests.Session()
    response = session.get(BASE_URL)
    soup = BeautifulSoup(response.text, "html.parser")

    projects = []
    seen_links = set()

    for a_tag in soup.find_all("a", href=True):
        link = a_tag["href"]
        if not link.startswith("/vote/"):
            continue
        full_link = f"https://vam.golosza.ru{link}"
        if full_link in seen_links:
            continue

        seen_links.add(full_link)
        try:
            project_response = session.get(full_link, timeout=10)
            project_soup = BeautifulSoup(project_response.text, "html.parser")

            title_tag = project_soup.find("p", class_="title")
            title = title_tag.get_text(strip=True) if title_tag else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

            votes_tag = project_soup.find("span", class_="voting-count")
            if votes_tag:
                votes_text = votes_tag.get_text(strip=True)
                votes_num = int("".join(filter(str.isdigit, votes_text)))
            else:
                votes_num = 0

            projects.append({
                "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞": title,
                "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç": full_link,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤": votes_num
            })

            time.sleep(0.25)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {full_link}: {e}")

    session.close()
    df = pd.DataFrame(projects)
    df = df.sort_values(by="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤", ascending=False).reset_index(drop=True)
    return df

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ ---
def save_history(df):
    df = df.copy()
    df["–î–∞—Ç–∞"] = date.today().isoformat()

    if not os.path.exists(HISTORY_FILE):
        df.to_excel(HISTORY_FILE, index=False)
    else:
        old_df = pd.read_excel(HISTORY_FILE)
        combined = pd.concat([old_df, df], ignore_index=True)
        combined.to_excel(HISTORY_FILE, index=False)

# --- –ü–æ–¥—Å—á—ë—Ç —Ä–∞–∑–Ω–∏—Ü—ã –≥–æ–ª–æ—Å–æ–≤ ---
def get_daily_diff(df_today: pd.DataFrame):
    if not os.path.exists(HISTORY_FILE):
        df_today["–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤"] = 0
        return df_today

    df_old = pd.read_excel(HISTORY_FILE)
    if "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç" not in df_old.columns or "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤" not in df_old.columns:
        df_today["–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤"] = 0
        return df_today

    df_today["–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç"] = df_today["–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç"].astype(str)
    df_old["–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç"] = df_old["–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç"].astype(str)

    merged = pd.merge(
        df_today,
        df_old[["–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤"]],
        on="–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç",
        how="left",
        suffixes=("", "_–≤—á–µ—Ä–∞")
    )

    merged["–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤"] = (
        merged["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤"] - merged["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤_–≤—á–µ—Ä–∞"].fillna(0)
    )

    merged["–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"] = datetime.now().strftime("%Y-%m-%d %H:%M")
    return merged

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ---
def display_table(df, top_n=None):
    df_display = df.copy()
    df_display["–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç"] = df_display["–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç"].apply(
        lambda x: f"<a href='{x}' target='_blank'>–°—Å—ã–ª–∫–∞</a>"
    )
    if top_n:
        df_display = df_display.head(top_n)
    st.write(df_display.to_html(escape=False, index=False), unsafe_allow_html=True)

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---
if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞"):
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
        df_today = get_projects_info()
        df_today = get_daily_diff(df_today)
        save_history(df_today)
        st.session_state["df_today"] = df_today
    st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df_today)} –ø—Ä–æ–µ–∫—Ç–æ–≤.")

df_today = st.session_state.get("df_today", pd.DataFrame())

if not df_today.empty:
    st.subheader("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤")
    search_query = st.text_input("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è").strip().lower()

    if search_query:
        df_filtered = df_today[df_today["–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"].str.lower().str.contains(search_query, na=False)]
    else:
        df_filtered = df_today

    st.markdown("### üèÜ –¢–æ–ø-10 –ø—Ä–æ–µ–∫—Ç–æ–≤")
    display_table(df_today.sort_values(by="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤", ascending=False), top_n=10)

    st.markdown("### üìã –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã")
    display_table(df_filtered)
else:
    st.info("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ üöÄ")
