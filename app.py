import requests
from bs4 import BeautifulSoup
import pandas as pd
import streamlit as st
import re
import os
from datetime import date

st.set_page_config(page_title="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤ vam.golosza.ru", layout="wide")
st.title("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤")

BASE_URL = "https://vam.golosza.ru/vote/list?page=&mo-search=–±–æ—Ä&filter%5Baddress%5D%5B%5D=1&search=undefined"
PROJECT_BASE = "https://vam.golosza.ru/vote/"
HISTORY_FILE = "votes_history.csv"

@st.cache_data(ttl=600)
def get_projects_info():
    url = "https://vam.golosza.ru"
    response = requests.get(url)
    soup = BeautifulSoup(response.text, "html.parser")

    projects = []
    seen_links = set()

    session = requests.Session()  # üîπ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

    for a_tag in soup.find_all("a", href=True):
        link = a_tag["href"]
        if not link.startswith("/vote/"):
            continue
        full_link = f"https://vam.golosza.ru{link}"
        if full_link in seen_links:
            continue

        seen_links.add(full_link)

        try:
            project_response = session.get(full_link, timeout=10)
            project_soup = BeautifulSoup(project_response.text, "html.parser")

            title_tag = project_soup.find("p", class_="title")
            title = title_tag.get_text(strip=True) if title_tag else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

            votes_tag = project_soup.find("span", class_="voting-count")
            votes = int(votes_tag.get_text(strip=True)) if votes_tag else 0

            projects.append({
                "–ù–∞–∑–≤–∞–Ω–∏–µ": title,
                "–°—Å—ã–ª–∫–∞": full_link,
                "–ì–æ–ª–æ—Å–∞": votes
            })

            time.sleep(0.2)  # üîπ –∑–∞–º–µ–¥–ª—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–∞–π—Ç

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {full_link}: {e}")

    session.close()  # üîπ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
    return projects

def save_history(df):
    today = date.today().isoformat()
    df_save = df.copy()
    df_save["–î–∞—Ç–∞"] = today
    df_save.to_csv(HISTORY_FILE, mode="a", index=False, header=not os.path.exists(HISTORY_FILE))

def get_daily_diff(df_today: pd.DataFrame):
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º –¥–Ω—ë–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame —Å —Ä–∞–∑–Ω–∏—Ü–µ–π –ø–æ –≥–æ–ª–æ—Å–∞–º.
    """
    history_file = "history.xlsx"

    # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª
    if not os.path.exists(history_file):
        df_today["–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤"] = 0
        df_today.to_excel(history_file, index=False)
        return df_today

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    df_old = pd.read_excel(history_file)

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å—Å—ã–ª–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    df_old["–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç"] = df_old["–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç"].astype(str).str.extract(r'(https?://[^\s<]+)')[0]
    df_today["–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç"] = df_today["–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç"].astype(str).str.extract(r'(https?://[^\s<]+)')[0]

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –ø—Ä–æ–µ–∫—Ç
    df_today_compare = pd.merge(
        df_today,
        df_old[["–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤"]],
        on="–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç",
        how="left",
        suffixes=("", "_–≤—á–µ—Ä–∞")
    )

    # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤
    df_today_compare["–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤"] = (
        df_today_compare["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤"] - df_today_compare["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤_–≤—á–µ—Ä–∞"].fillna(0)
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Å–ª–µ–ø–æ–∫
    df_today_compare.to_excel(history_file, index=False)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º
    df_today_compare = df_today_compare.sort_values(by="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤", ascending=False).reset_index(drop=True)

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    df_today_compare["–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"] = datetime.now().strftime("%Y-%m-%d %H:%M")

    return df_today_compare

def display_table(df, top_n=None):
    df_display = df.copy()
    df_display["–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç"] = df_display["–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç"].apply(
        lambda x: f"<a href='{x}' target='_blank'>–°—Å—ã–ª–∫–∞</a>"
    )
    if top_n:
        df_display = df_display.head(top_n)
    st.write(df_display.to_html(escape=False, index=True), unsafe_allow_html=True)

# --- Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∫–Ω–æ–ø–∫–æ–π
if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞"):
    df_today = get_projects_info()
    df_today = get_daily_diff(df_today)
    save_history(df_today)
    st.session_state["df_today"] = df_today
    st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df_today)} –ø—Ä–æ–µ–∫—Ç–æ–≤.")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
df_today = st.session_state.get("df_today", pd.DataFrame())

if not df_today.empty:
    # –ü–æ–∏—Å–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    st.subheader("üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤")
    search_query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞").strip().lower()

    if search_query:
        df_filtered = df_today[df_today["–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"].str.lower().str.contains(search_query)]
    else:
        df_filtered = df_today

    st.subheader("üî• –¢–æ–ø-10 –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –≥–æ–ª–æ—Å–∞–º")
    display_table(df_today, top_n=10)

    st.subheader("üìã –í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã")
    display_table(df_filtered)
else:
    st.info("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ üöÄ")


